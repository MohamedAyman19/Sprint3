
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d98  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088b  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098a  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000337e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <System_Init>:
uint8_t counter;
uint8_t data[6];
uint8_t check[12];
void System_Init()
{
	SPI_vdInit();
  7c:	0e 94 9d 00 	call	0x13a	; 0x13a <SPI_vdInit>
	UART_vdInit();
  80:	0e 94 aa 00 	call	0x154	; 0x154 <UART_vdInit>
	DIO_setPortDirection(PortA,OUTPUT);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPortDirection>
  8c:	08 95       	ret

0000008e <System_Update>:
	

}
void System_Update()
{
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
	counter=0;
  92:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter>
	do 
	{
		data[counter]=SPI_SlaveReceive(9);
  96:	c0 91 6c 00 	lds	r28, 0x006C	; 0x80006c <counter>
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_SlaveReceive>
  a2:	c3 59       	subi	r28, 0x93	; 147
  a4:	df 4f       	sbci	r29, 0xFF	; 255
  a6:	88 83       	st	Y, r24
		counter++;
  a8:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <counter>
  ac:	ef 5f       	subi	r30, 0xFF	; 255
  ae:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <counter>
		
	} while (data[counter-1]!='\0');
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e4 59       	subi	r30, 0x94	; 148
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	81 11       	cpse	r24, r1
  bc:	ec cf       	rjmp	.-40     	; 0x96 <System_Update+0x8>
		UART_uint8_tSendtring(data);
  be:	8d e6       	ldi	r24, 0x6D	; 109
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_uint8_tSendtring>

	
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <main>:



int main(void)
{
	System_Init();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <System_Init>
	
    while (1) 
    {
		 System_Update();
  d0:	0e 94 47 00 	call	0x8e	; 0x8e <System_Update>
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <main+0x4>

000000d6 <DIO_setPortDirection>:
}

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	60 f5       	brcc	.+88     	; 0x132 <DIO_setPortDirection+0x5c>
		u8_State=Success;
		switch(port)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	79 f0       	breq	.+30     	; 0xfc <DIO_setPortDirection+0x26>
  de:	28 f0       	brcs	.+10     	; 0xea <DIO_setPortDirection+0x14>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	a9 f0       	breq	.+42     	; 0x10e <DIO_setPortDirection+0x38>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	e1 f0       	breq	.+56     	; 0x120 <DIO_setPortDirection+0x4a>
  e8:	26 c0       	rjmp	.+76     	; 0x136 <DIO_setPortDirection+0x60>
		{
		case PortA:
		{
			if(dir==OUTPUT)
  ea:	61 30       	cpi	r22, 0x01	; 1
  ec:	21 f4       	brne	.+8      	; 0xf6 <DIO_setPortDirection+0x20>
			{
				DDRA=OUTPUT_PORT;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a bb       	out	0x1a, r24	; 26

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	08 95       	ret
		{
			if(dir==OUTPUT)
			{
				DDRA=OUTPUT_PORT;
			}else
				DDRA=INPUT_PORT;
  f6:	1a ba       	out	0x1a, r1	; 26

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret
				DDRA=INPUT_PORT;
		}
		break;
		case PortB:
		{
			if(dir==OUTPUT)
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	21 f4       	brne	.+8      	; 0x108 <DIO_setPortDirection+0x32>
			{
				DDRB=OUTPUT_PORT;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	87 bb       	out	0x17, r24	; 23

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
		{
			if(dir==OUTPUT)
			{
				DDRB=OUTPUT_PORT;
			}else
				DDRB=INPUT_PORT;
 108:	17 ba       	out	0x17, r1	; 23

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
				DDRB=INPUT_PORT;
		}
		break;
		case PortC:
		{
			if(dir==OUTPUT)
 10e:	61 30       	cpi	r22, 0x01	; 1
 110:	21 f4       	brne	.+8      	; 0x11a <DIO_setPortDirection+0x44>
			{
				DDRC=OUTPUT_PORT;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 bb       	out	0x14, r24	; 20

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	08 95       	ret
		{
			if(dir==OUTPUT)
			{
				DDRC=OUTPUT_PORT;
			}else
				DDRC=INPUT_PORT;
 11a:	14 ba       	out	0x14, r1	; 20

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
				DDRC=INPUT_PORT;
		}
		break;
		case PortD:
		{
			if(dir==OUTPUT)
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	21 f4       	brne	.+8      	; 0x12c <DIO_setPortDirection+0x56>
			{
				DDRD=OUTPUT_PORT;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	81 bb       	out	0x11, r24	; 17

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	08 95       	ret
		{
			if(dir==OUTPUT)
			{
				DDRD=OUTPUT_PORT;
			}else
				DDRD=INPUT_PORT;
 12c:	11 ba       	out	0x11, r1	; 17

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
	return u8_State;
}

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
	E_STATUS u8_State=ERROR;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	08 95       	ret
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 136:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		}
	}
	return u8_State;
}
 138:	08 95       	ret

0000013a <SPI_vdInit>:
	//while((BIT_READ(SPSR,Pin6))==1);
	/* Wait for transmission complete */
	while((BIT_READ(SPSR,Pin7))!=1);
	SET_BIT(SPSR,Pin7);
		return (SPDR);
}
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	85 e4       	ldi	r24, 0x45	; 69
 140:	8d b9       	out	0x0d, r24	; 13
 142:	08 95       	ret

00000144 <SPI_SlaveReceive>:

uint8_t SPI_SlaveReceive(uint8_t cData)
{
	SPDR = cData;
 144:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	
	while((BIT_READ(SPSR,Pin7))!=1);
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <SPI_SlaveReceive+0x2>
	SET_BIT(SPSR,Pin7);
 14a:	8e b1       	in	r24, 0x0e	; 14
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8e b9       	out	0x0e, r24	; 14
	/* Return data register */
	return SPDR;
 150:	8f b1       	in	r24, 0x0f	; 15
	
}
 152:	08 95       	ret

00000154 <UART_vdInit>:
  Result = UDR_REGISTER;
  
  // Clear Flag 
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	89 b9       	out	0x09, r24	; 9
 158:	10 bc       	out	0x20, r1	; 32
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	86 e8       	ldi	r24, 0x86	; 134
 160:	80 bd       	out	0x20, r24	; 32
 162:	08 95       	ret

00000164 <UART_vdSendByte>:
 164:	5d 9b       	sbis	0x0b, 5	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <UART_vdSendByte>
 168:	8c b9       	out	0x0c, r24	; 12
 16a:	08 95       	ret

0000016c <UART_uint8_tSendtring>:
uint8_t UART_uint8_tSendtring(unsigned char*data)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	8c 01       	movw	r16, r24
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	03 c0       	rjmp	.+6      	; 0x17e <UART_uint8_tSendtring+0x12>
	{
		UART_vdSendByte(data[i]);
 178:	0e 94 b2 00 	call	0x164	; 0x164 <UART_vdSendByte>
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
uint8_t UART_uint8_tSendtring(unsigned char*data)
{
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	f1 1d       	adc	r31, r1
 184:	80 81       	ld	r24, Z
 186:	8d 30       	cpi	r24, 0x0D	; 13
 188:	11 f0       	breq	.+4      	; 0x18e <UART_uint8_tSendtring+0x22>
 18a:	81 11       	cpse	r24, r1
 18c:	f5 cf       	rjmp	.-22     	; 0x178 <UART_uint8_tSendtring+0xc>
	{
		UART_vdSendByte(data[i]);
	}
	UART_vdSendByte('\r');
 18e:	8d e0       	ldi	r24, 0x0D	; 13
 190:	0e 94 b2 00 	call	0x164	; 0x164 <UART_vdSendByte>
	return 0;
}
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
