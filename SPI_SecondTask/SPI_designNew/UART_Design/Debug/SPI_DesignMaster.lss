
SPI_DesignMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800060  00800060  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e74  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088b  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095d  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000985  00000000  00000000  00002d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000036cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 37       	cpi	r26, 0x7C	; 124
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  74:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <System_Init>:
uint8_t data[6];
uint8_t recievedstring[20];
uint8_t counter;
void System_Init()
{
	SPI_vdInit();
  7c:	0e 94 c6 01 	call	0x38c	; 0x38c <SPI_vdInit>
	UART_vdInit();
  80:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_vdInit>

	DIO_setPinDirection(PortB,Pin4,OUTPUT);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	64 e0       	ldi	r22, 0x04	; 4
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 82 00 	call	0x104	; 0x104 <DIO_setPinDirection>
  8e:	08 95       	ret

00000090 <System_Update>:

}
void System_Update()
{
	
		UART_uint8_tGetString(recievedstring);
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <UART_uint8_tGetString>
		DIO_writePin(PortB,Pin4,LOW);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	64 e0       	ldi	r22, 0x04	; 4
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_writePin>
		counter=0;
  a2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <counter>
		do
		{
			SPI_MasterTransmit(recievedstring[counter]);
  a6:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <counter>
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	e0 5a       	subi	r30, 0xA0	; 160
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	80 81       	ld	r24, Z
  b2:	0e 94 cb 01 	call	0x396	; 0x396 <SPI_MasterTransmit>
			for(uint32_t i=0;i<50000;i++);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	dc 01       	movw	r26, r24
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <System_Update+0x34>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	a1 1d       	adc	r26, r1
  c2:	b1 1d       	adc	r27, r1
  c4:	80 35       	cpi	r24, 0x50	; 80
  c6:	23 ec       	ldi	r18, 0xC3	; 195
  c8:	92 07       	cpc	r25, r18
  ca:	a1 05       	cpc	r26, r1
  cc:	b1 05       	cpc	r27, r1
  ce:	b8 f3       	brcs	.-18     	; 0xbe <System_Update+0x2e>
			counter++;
  d0:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <counter>
  d4:	ef 5f       	subi	r30, 0xFF	; 255
  d6:	e0 93 75 00 	sts	0x0075, r30	; 0x800075 <counter>
		}while(recievedstring[counter-1]!='\0');
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e1 5a       	subi	r30, 0xA1	; 161
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	e0 cf       	rjmp	.-64     	; 0xa6 <System_Update+0x16>
		DIO_writePin(PortB,Pin4,HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_writePin>
	DIO_togglePin(PortA,Pin0);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 03 01 	call	0x206	; 0x206 <DIO_togglePin>
  f8:	08 95       	ret

000000fa <main>:
#include "APP.h"


int main(void)
{
	System_Init();
  fa:	0e 94 3e 00 	call	0x7c	; 0x7c <System_Init>
	
    while (1) 
    {
		 System_Update();
  fe:	0e 94 48 00 	call	0x90	; 0x90 <System_Update>
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x4>

00000104 <DIO_setPinDirection>:
			*value=PIND;
			break;
		}
	}
	return u8_State;
}
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	08 f0       	brcs	.+2      	; 0x10a <DIO_setPinDirection+0x6>
 108:	78 c0       	rjmp	.+240    	; 0x1fa <DIO_setPinDirection+0xf6>
 10a:	68 30       	cpi	r22, 0x08	; 8
 10c:	08 f0       	brcs	.+2      	; 0x110 <DIO_setPinDirection+0xc>
 10e:	77 c0       	rjmp	.+238    	; 0x1fe <DIO_setPinDirection+0xfa>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	11 f1       	breq	.+68     	; 0x158 <DIO_setPinDirection+0x54>
 114:	30 f0       	brcs	.+12     	; 0x122 <DIO_setPinDirection+0x1e>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	d1 f1       	breq	.+116    	; 0x18e <DIO_setPinDirection+0x8a>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_setPinDirection+0x1c>
 11e:	52 c0       	rjmp	.+164    	; 0x1c4 <DIO_setPinDirection+0xc0>
 120:	70 c0       	rjmp	.+224    	; 0x202 <DIO_setPinDirection+0xfe>
 122:	41 11       	cpse	r20, r1
 124:	0d c0       	rjmp	.+26     	; 0x140 <DIO_setPinDirection+0x3c>
 126:	2a b3       	in	r18, 0x1a	; 26
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_setPinDirection+0x2e>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_setPinDirection+0x2a>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0x48>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0x44>
 150:	82 2b       	or	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	41 11       	cpse	r20, r1
 15a:	0d c0       	rjmp	.+26     	; 0x176 <DIO_setPinDirection+0x72>
 15c:	27 b3       	in	r18, 0x17	; 23
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_setPinDirection+0x64>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_setPinDirection+0x60>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	87 bb       	out	0x17, r24	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinDirection+0x7e>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinDirection+0x7a>
 186:	82 2b       	or	r24, r18
 188:	87 bb       	out	0x17, r24	; 23
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	41 11       	cpse	r20, r1
 190:	0d c0       	rjmp	.+26     	; 0x1ac <DIO_setPinDirection+0xa8>
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_setPinDirection+0x9a>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_setPinDirection+0x96>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	84 bb       	out	0x14, r24	; 20
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	24 b3       	in	r18, 0x14	; 20
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinDirection+0xb4>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinDirection+0xb0>
 1bc:	82 2b       	or	r24, r18
 1be:	84 bb       	out	0x14, r24	; 20
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret
 1c4:	41 11       	cpse	r20, r1
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <DIO_setPinDirection+0xde>
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinDirection+0xd0>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinDirection+0xcc>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	81 bb       	out	0x11, r24	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	08 95       	ret
 1e2:	21 b3       	in	r18, 0x11	; 17
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_setPinDirection+0xea>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_setPinDirection+0xe6>
 1f2:	82 2b       	or	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	08 95       	ret
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <DIO_togglePin>:
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	d0 f5       	brcc	.+116    	; 0x27e <DIO_togglePin+0x78>
 20a:	68 30       	cpi	r22, 0x08	; 8
 20c:	d0 f5       	brcc	.+116    	; 0x282 <DIO_togglePin+0x7c>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	91 f0       	breq	.+36     	; 0x236 <DIO_togglePin+0x30>
 212:	28 f0       	brcs	.+10     	; 0x21e <DIO_togglePin+0x18>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	d9 f0       	breq	.+54     	; 0x24e <DIO_togglePin+0x48>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	29 f1       	breq	.+74     	; 0x266 <DIO_togglePin+0x60>
 21c:	34 c0       	rjmp	.+104    	; 0x286 <DIO_togglePin+0x80>
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_togglePin+0x24>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_togglePin+0x20>
 22e:	82 27       	eor	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	08 95       	ret
 236:	28 b3       	in	r18, 0x18	; 24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_togglePin+0x3c>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_togglePin+0x38>
 246:	82 27       	eor	r24, r18
 248:	88 bb       	out	0x18, r24	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_togglePin+0x54>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_togglePin+0x50>
 25e:	82 27       	eor	r24, r18
 260:	85 bb       	out	0x15, r24	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	08 95       	ret
 266:	22 b3       	in	r18, 0x12	; 18
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_togglePin+0x6c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_togglePin+0x68>
 276:	82 27       	eor	r24, r18
 278:	82 bb       	out	0x12, r24	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	08 95       	ret
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	08 95       	ret
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	08 95       	ret
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret

0000028a <DIO_writePin>:


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	08 f0       	brcs	.+2      	; 0x290 <DIO_writePin+0x6>
 28e:	78 c0       	rjmp	.+240    	; 0x380 <DIO_writePin+0xf6>
 290:	68 30       	cpi	r22, 0x08	; 8
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_writePin+0xc>
 294:	77 c0       	rjmp	.+238    	; 0x384 <DIO_writePin+0xfa>
		u8_State=Success;
		switch(port)
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	11 f1       	breq	.+68     	; 0x2de <DIO_writePin+0x54>
 29a:	30 f0       	brcs	.+12     	; 0x2a8 <DIO_writePin+0x1e>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	d1 f1       	breq	.+116    	; 0x314 <DIO_writePin+0x8a>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_writePin+0x1c>
 2a4:	52 c0       	rjmp	.+164    	; 0x34a <DIO_writePin+0xc0>
 2a6:	70 c0       	rjmp	.+224    	; 0x388 <DIO_writePin+0xfe>
		{
		case PortA:
		{
			if(data==HIGH)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	61 f4       	brne	.+24     	; 0x2c4 <DIO_writePin+0x3a>
				SET_BIT(PORTA,pin);
 2ac:	2b b3       	in	r18, 0x1b	; 27
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_writePin+0x2e>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_writePin+0x2a>
 2bc:	82 2b       	or	r24, r18
 2be:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
		case PortA:
		{
			if(data==HIGH)
				SET_BIT(PORTA,pin);
			else
				CLEAR_BIT(PORTA,pin);
 2c4:	2b b3       	in	r18, 0x1b	; 27
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_writePin+0x46>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_writePin+0x42>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	08 95       	ret
				CLEAR_BIT(PORTA,pin);
		}
		break;
		case PortB:
		{
			if(data==HIGH)
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	61 f4       	brne	.+24     	; 0x2fa <DIO_writePin+0x70>
				SET_BIT(PORTB,pin);
 2e2:	28 b3       	in	r18, 0x18	; 24
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_writePin+0x64>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_writePin+0x60>
 2f2:	82 2b       	or	r24, r18
 2f4:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	08 95       	ret
		case PortB:
		{
			if(data==HIGH)
				SET_BIT(PORTB,pin);
			else
				CLEAR_BIT(PORTB,pin);
 2fa:	28 b3       	in	r18, 0x18	; 24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_writePin+0x7c>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_writePin+0x78>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret
				CLEAR_BIT(PORTB,pin);
		}
		break;
		case PortC:
		{
			if(data==HIGH)
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	61 f4       	brne	.+24     	; 0x330 <DIO_writePin+0xa6>
				SET_BIT(PORTC,pin);
 318:	25 b3       	in	r18, 0x15	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_writePin+0x9a>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_writePin+0x96>
 328:	82 2b       	or	r24, r18
 32a:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
		case PortC:
		{
			if(data==HIGH)
				SET_BIT(PORTC,pin);
			else
				CLEAR_BIT(PORTC,pin);
 330:	25 b3       	in	r18, 0x15	; 21
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_writePin+0xb2>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_writePin+0xae>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
				CLEAR_BIT(PORTC,pin);
		}
		break;
		case PortD:
		{
			if(data==HIGH)
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	61 f4       	brne	.+24     	; 0x366 <DIO_writePin+0xdc>
				SET_BIT(PORTD,pin);
 34e:	22 b3       	in	r18, 0x12	; 18
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_writePin+0xd0>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_writePin+0xcc>
 35e:	82 2b       	or	r24, r18
 360:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
		case PortD:
		{
			if(data==HIGH)
				SET_BIT(PORTD,pin);
			else
				CLEAR_BIT(PORTD,pin);
 366:	22 b3       	in	r18, 0x12	; 18
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_writePin+0xe8>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_writePin+0xe4>
 376:	80 95       	com	r24
 378:	82 23       	and	r24, r18
 37a:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
}


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	08 95       	ret
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	08 95       	ret
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
 388:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		}
	}
	return u8_State;
}
 38a:	08 95       	ret

0000038c <SPI_vdInit>:

void SPI_vdInit(void)
{
	#if (SPI_Mode==Master)
	
	DDRB=((1<<5)|(1<<7));    // * Set MOSI and SCK output
 38c:	80 ea       	ldi	r24, 0xA0	; 160
 38e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<6)|(1<<4)|(1<<0)|(1<<2);
 390:	85 e5       	ldi	r24, 0x55	; 85
 392:	8d b9       	out	0x0d, r24	; 13
 394:	08 95       	ret

00000396 <SPI_MasterTransmit>:

}
uint8_t SPI_MasterTransmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 396:	8f b9       	out	0x0f, r24	; 15

	/* Wait for transmission complete */
	while((BIT_READ(SPSR,Pin7))!=1);
 398:	77 9b       	sbis	0x0e, 7	; 14
 39a:	fe cf       	rjmp	.-4      	; 0x398 <SPI_MasterTransmit+0x2>
	SET_BIT(SPSR,Pin7);
 39c:	8e b1       	in	r24, 0x0e	; 14
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	8e b9       	out	0x0e, r24	; 14
	return (SPDR);
 3a2:	8f b1       	in	r24, 0x0f	; 15
		
}
 3a4:	08 95       	ret

000003a6 <UART_vdInit>:
	{
		UART_vdSendByte(data[i]);
	}
	UART_vdSendByte('\r');
	return 0;
}
 3a6:	83 e3       	ldi	r24, 0x33	; 51
 3a8:	89 b9       	out	0x09, r24	; 9
 3aa:	10 bc       	out	0x20, r1	; 32
 3ac:	88 e1       	ldi	r24, 0x18	; 24
 3ae:	8a b9       	out	0x0a, r24	; 10
 3b0:	86 e8       	ldi	r24, 0x86	; 134
 3b2:	80 bd       	out	0x20, r24	; 32
 3b4:	08 95       	ret

000003b6 <UART_uint8_tGetByte>:
 3b6:	5f 9b       	sbis	0x0b, 7	; 11
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <UART_uint8_tGetByte>
 3ba:	8c b1       	in	r24, 0x0c	; 12
 3bc:	9b b1       	in	r25, 0x0b	; 11
 3be:	90 68       	ori	r25, 0x80	; 128
 3c0:	9b b9       	out	0x0b, r25	; 11
 3c2:	08 95       	ret

000003c4 <UART_uint8_tGetString>:
void UART_uint8_tGetString(uint8_t*data)
{
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	8c 01       	movw	r16, r24
	uint8_t i=0;
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		
	
		data[i]=UART_uint8_tGetByte();
 3d2:	78 01       	movw	r14, r16
 3d4:	ec 0e       	add	r14, r28
 3d6:	f1 1c       	adc	r15, r1
 3d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_uint8_tGetByte>
 3dc:	f7 01       	movw	r30, r14
 3de:	80 83       	st	Z, r24
		i++;
 3e0:	cf 5f       	subi	r28, 0xFF	; 255
	
	}while(data[(i-1)]!=13);
 3e2:	ec 2f       	mov	r30, r28
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	e0 0f       	add	r30, r16
 3ea:	f1 1f       	adc	r31, r17
 3ec:	80 81       	ld	r24, Z
 3ee:	8d 30       	cpi	r24, 0x0D	; 13
 3f0:	81 f7       	brne	.-32     	; 0x3d2 <UART_uint8_tGetString+0xe>
	data[i-1]='\0';
 3f2:	10 82       	st	Z, r1
	
}
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
