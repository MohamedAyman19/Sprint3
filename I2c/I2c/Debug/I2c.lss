
I2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a3  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f7  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Init>:
 *  Author: ayman
 */ 
#include "I2c.h"
uint8_t I2C_Init(uint8_t address)
{
	I2C_TWSR=I2C_PRESCALER_64;  //adjust Prescaler
  6c:	93 e0       	ldi	r25, 0x03	; 3
  6e:	91 b9       	out	0x01, r25	; 1
	
	I2C_TWAR=address;
  70:	82 b9       	out	0x02, r24	; 2
	I2C_TWCR =(1<<2)|(1<<6);
  72:	84 e4       	ldi	r24, 0x44	; 68
  74:	86 bf       	out	0x36, r24	; 54
	I2C_TWBR=20;
  76:	84 e1       	ldi	r24, 0x14	; 20
  78:	80 b9       	out	0x00, r24	; 0

   /* return success message */
   return I2C_SUCCESS;
}
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	08 95       	ret

0000007e <I2C_Start>:
uint8_t I2C_Start()
{
	I2C_TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<2);
  7e:	84 ea       	ldi	r24, 0xA4	; 164
  80:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR & (1<<TWINT)));
  82:	06 b6       	in	r0, 0x36	; 54
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <I2C_Start+0x4>
	
	return I2C_SUCCESS;
}
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	08 95       	ret

0000008c <I2C_Write>:
uint8_t I2C_Write(uint8_t Data)
{
	I2C_TWDR=Data;
  8c:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR = (1<<7)|(1<<2);
  8e:	84 e8       	ldi	r24, 0x84	; 132
  90:	86 bf       	out	0x36, r24	; 54
	
	while (!(I2C_TWCR & (1<<7)));
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <I2C_Write+0x6>
	return I2C_SUCCESS;
}
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret

0000009c <I2C_Stop>:
uint8_t I2C_Stop()
{
	I2C_TWCR = (1<<7)|(1<<2)|(1<<4);
  9c:	84 e9       	ldi	r24, 0x94	; 148
  9e:	86 bf       	out	0x36, r24	; 54
	while (I2C_TWCR & TWSTO);
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	02 fc       	sbrc	r0, 2
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <I2C_Stop+0x4>
	return I2C_SUCCESS;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
    /* Replace with your application code */
	I2C_Init(0b00000010);
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Init>
	for(uint32_t i=0;i<50000;i++);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	dc 01       	movw	r26, r24
  b6:	03 c0       	rjmp	.+6      	; 0xbe <main+0x14>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
  be:	80 35       	cpi	r24, 0x50	; 80
  c0:	23 ec       	ldi	r18, 0xC3	; 195
  c2:	92 07       	cpc	r25, r18
  c4:	a1 05       	cpc	r26, r1
  c6:	b1 05       	cpc	r27, r1
  c8:	b8 f3       	brcs	.-18     	; 0xb8 <main+0xe>
    while (1) 
    {
		
		I2C_Start();
  ca:	0e 94 3f 00 	call	0x7e	; 0x7e <I2C_Start>
		I2C_Write(0b00001110);
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	0e 94 46 00 	call	0x8c	; 0x8c <I2C_Write>
		I2C_Write('A');
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 46 00 	call	0x8c	; 0x8c <I2C_Write>
		I2C_Stop();
  da:	0e 94 4e 00 	call	0x9c	; 0x9c <I2C_Stop>
  de:	f5 cf       	rjmp	.-22     	; 0xca <main+0x20>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
