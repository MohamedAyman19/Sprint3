
I2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003b6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a0  008000a0  0000048a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e67  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000827  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{

	while(1)
	{
		EEPROM_init(0X03);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	0e 94 19 01 	call	0x232	; 0x232 <EEPROM_init>
		UART_vdInit();
  98:	0e 94 91 01 	call	0x322	; 0x322 <UART_vdInit>
		UART_uint8_tGetString(recieved);
  9c:	80 ea       	ldi	r24, 0xA0	; 160
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_uint8_tGetString>
		if((recieved[0]=='W')&&(recieved[1]=='R')&&(recieved[2]=='I')&&(recieved[3]=='T')&&(recieved[4]=='E'))
  a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  a8:	87 35       	cpi	r24, 0x57	; 87
  aa:	09 f0       	breq	.+2      	; 0xae <main+0x1c>
  ac:	68 c0       	rjmp	.+208    	; 0x17e <main+0xec>
  ae:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
  b2:	92 35       	cpi	r25, 0x52	; 82
  b4:	09 f0       	breq	.+2      	; 0xb8 <main+0x26>
  b6:	63 c0       	rjmp	.+198    	; 0x17e <main+0xec>
  b8:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <__data_end+0x2>
  bc:	99 34       	cpi	r25, 0x49	; 73
  be:	09 f0       	breq	.+2      	; 0xc2 <main+0x30>
  c0:	5e c0       	rjmp	.+188    	; 0x17e <main+0xec>
  c2:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <__data_end+0x3>
  c6:	94 35       	cpi	r25, 0x54	; 84
  c8:	09 f0       	breq	.+2      	; 0xcc <main+0x3a>
  ca:	59 c0       	rjmp	.+178    	; 0x17e <main+0xec>
  cc:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <__data_end+0x4>
  d0:	95 34       	cpi	r25, 0x45	; 69
  d2:	09 f0       	breq	.+2      	; 0xd6 <main+0x44>
  d4:	54 c0       	rjmp	.+168    	; 0x17e <main+0xec>
		{
			UART_uint8_tSendString("Write command recieved");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>

			UART_uint8_tGetString(recieved);
  de:	80 ea       	ldi	r24, 0xA0	; 160
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_uint8_tGetString>
			if((recieved[0]=='0')&&(recieved[1]=='x'))
  e6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  ea:	80 33       	cpi	r24, 0x30	; 48
  ec:	09 f0       	breq	.+2      	; 0xf0 <main+0x5e>
  ee:	42 c0       	rjmp	.+132    	; 0x174 <main+0xe2>
  f0:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__data_end+0x1>
  f4:	88 37       	cpi	r24, 0x78	; 120
  f6:	f1 f5       	brne	.+124    	; 0x174 <main+0xe2>
			{
					
				if(recieved[2]>57)
  f8:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end+0x2>
  fc:	8a 33       	cpi	r24, 0x3A	; 58
  fe:	18 f0       	brcs	.+6      	; 0x106 <main+0x74>
				{
					recieved[2]-=7;
 100:	87 50       	subi	r24, 0x07	; 7
 102:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end+0x2>
				}
				
				recievedAddress=((recieved[2]-'0')*16);
 106:	e0 ea       	ldi	r30, 0xA0	; 160
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	82 81       	ldd	r24, Z+2	; 0x02
 10c:	28 2f       	mov	r18, r24
 10e:	22 95       	swap	r18
 110:	20 7f       	andi	r18, 0xF0	; 240
				if(recieved[3]>57)
 112:	93 81       	ldd	r25, Z+3	; 0x03
 114:	9a 33       	cpi	r25, 0x3A	; 58
 116:	18 f0       	brcs	.+6      	; 0x11e <main+0x8c>
				{
					recieved[3]-=7;
 118:	97 50       	subi	r25, 0x07	; 7
 11a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x3>
				}
				recievedAddress+=(recieved[3]-'0');
 11e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__data_end+0x3>
 122:	82 0f       	add	r24, r18
 124:	80 53       	subi	r24, 0x30	; 48
 126:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <recievedAddress>
				
				UART_uint8_tSendString("OK");
 12a:	87 e7       	ldi	r24, 0x77	; 119
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
				recievedData=UART_uint8_tGetByte();
 132:	0e 94 9d 01 	call	0x33a	; 0x33a <UART_uint8_tGetByte>
 136:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <recievedData>
				UART_uint8_tSendString("\r");
 13a:	8a e7       	ldi	r24, 0x7A	; 122
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
				UART_uint8_tSendString("OK");
 142:	87 e7       	ldi	r24, 0x77	; 119
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
				EEPROM_writeByte(recievedAddress,recievedData);
 14a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <recievedAddress>
 14e:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <recievedData>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 1c 01 	call	0x238	; 0x238 <EEPROM_writeByte>
				for(uint32_t i=0;i<30000;i++);  //delay
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	dc 01       	movw	r26, r24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <main+0xd4>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	a1 1d       	adc	r26, r1
 164:	b1 1d       	adc	r27, r1
 166:	80 33       	cpi	r24, 0x30	; 48
 168:	25 e7       	ldi	r18, 0x75	; 117
 16a:	92 07       	cpc	r25, r18
 16c:	a1 05       	cpc	r26, r1
 16e:	b1 05       	cpc	r27, r1
 170:	b8 f3       	brcs	.-18     	; 0x160 <main+0xce>
 172:	8f cf       	rjmp	.-226    	; 0x92 <main>
			}
			else
			{
				UART_uint8_tSendString("wrong command");
 174:	8c e7       	ldi	r24, 0x7C	; 124
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
 17c:	8a cf       	rjmp	.-236    	; 0x92 <main>
			}

		}
		else if((recieved[0]=='R')&&(recieved[1]=='E')&&(recieved[2]=='A')&&(recieved[3]=='D'))
 17e:	82 35       	cpi	r24, 0x52	; 82
 180:	09 f0       	breq	.+2      	; 0x184 <main+0xf2>
 182:	52 c0       	rjmp	.+164    	; 0x228 <main+0x196>
 184:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__data_end+0x1>
 188:	85 34       	cpi	r24, 0x45	; 69
 18a:	09 f0       	breq	.+2      	; 0x18e <main+0xfc>
 18c:	4d c0       	rjmp	.+154    	; 0x228 <main+0x196>
 18e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end+0x2>
 192:	81 34       	cpi	r24, 0x41	; 65
 194:	09 f0       	breq	.+2      	; 0x198 <main+0x106>
 196:	48 c0       	rjmp	.+144    	; 0x228 <main+0x196>
 198:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__data_end+0x3>
 19c:	84 34       	cpi	r24, 0x44	; 68
 19e:	09 f0       	breq	.+2      	; 0x1a2 <main+0x110>
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <main+0x196>
		{
			UART_uint8_tSendString("Read command recieved");
 1a2:	8a e8       	ldi	r24, 0x8A	; 138
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
			UART_uint8_tGetString(recieved);
 1aa:	80 ea       	ldi	r24, 0xA0	; 160
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_uint8_tGetString>
			if((recieved[0]=='0')&&(recieved[1]=='x'))
 1b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 1b6:	80 33       	cpi	r24, 0x30	; 48
 1b8:	91 f5       	brne	.+100    	; 0x21e <main+0x18c>
 1ba:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__data_end+0x1>
 1be:	88 37       	cpi	r24, 0x78	; 120
 1c0:	71 f5       	brne	.+92     	; 0x21e <main+0x18c>
			{
				if(recieved[2]>57)
 1c2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end+0x2>
 1c6:	8a 33       	cpi	r24, 0x3A	; 58
 1c8:	18 f0       	brcs	.+6      	; 0x1d0 <main+0x13e>
				{
					recieved[2]-=7;
 1ca:	87 50       	subi	r24, 0x07	; 7
 1cc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end+0x2>
				}
	
				recievedAddress=((recieved[2]-'0')*16);
 1d0:	e0 ea       	ldi	r30, 0xA0	; 160
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	82 81       	ldd	r24, Z+2	; 0x02
 1d6:	28 2f       	mov	r18, r24
 1d8:	22 95       	swap	r18
 1da:	20 7f       	andi	r18, 0xF0	; 240
				if(recieved[3]>57)
 1dc:	93 81       	ldd	r25, Z+3	; 0x03
 1de:	9a 33       	cpi	r25, 0x3A	; 58
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <main+0x156>
				{
					recieved[3]-=7;
 1e2:	97 50       	subi	r25, 0x07	; 7
 1e4:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x3>
				}
				recievedAddress+=(recieved[3]-'0');
 1e8:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__data_end+0x3>
 1ec:	82 0f       	add	r24, r18
 1ee:	80 53       	subi	r24, 0x30	; 48
 1f0:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <recievedAddress>

				UART_uint8_tSendString("OK");
 1f4:	87 e7       	ldi	r24, 0x77	; 119
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
				EEPROM_readByte(recievedAddress,(&recievedData));
 1fc:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <recievedAddress>
 200:	6b ea       	ldi	r22, 0xAB	; 171
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 3b 01 	call	0x276	; 0x276 <EEPROM_readByte>
				UART_vdSendByte(recievedData);
 20a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <recievedData>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 99 01 	call	0x332	; 0x332 <UART_vdSendByte>
				UART_uint8_tSendString("\r");
 214:	8a e7       	ldi	r24, 0x7A	; 122
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
		else if((recieved[0]=='R')&&(recieved[1]=='E')&&(recieved[2]=='A')&&(recieved[3]=='D'))
		{
			UART_uint8_tSendString("Read command recieved");
			UART_uint8_tGetString(recieved);
			if((recieved[0]=='0')&&(recieved[1]=='x'))
			{
 21c:	3a cf       	rjmp	.-396    	; 0x92 <main>
				UART_vdSendByte(recievedData);
				UART_uint8_tSendString("\r");
			}
			else
			{
				UART_uint8_tSendString("wrong command");
 21e:	8c e7       	ldi	r24, 0x7C	; 124
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
 226:	35 cf       	rjmp	.-406    	; 0x92 <main>
			}
		}
		else
		{
			UART_uint8_tSendString("wrong command");
 228:	8c e7       	ldi	r24, 0x7C	; 124
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 a4 01 	call	0x348	; 0x348 <UART_uint8_tSendString>
 230:	30 cf       	rjmp	.-416    	; 0x92 <main>

00000232 <EEPROM_init>:
 */ 
#include "EEPROM.h"

void EEPROM_init(uint8_t ADDR)
{
	I2C_Init(ADDR);
 232:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Init>
 236:	08 95       	ret

00000238 <EEPROM_writeByte>:
}

uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
 240:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
    I2C_Start();
 242:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>

    I2C_Write((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
 246:	ce 01       	movw	r24, r28
 248:	88 27       	eor	r24, r24
 24a:	97 70       	andi	r25, 0x07	; 7
 24c:	88 0f       	add	r24, r24
 24e:	89 2f       	mov	r24, r25
 250:	88 1f       	adc	r24, r24
 252:	99 0b       	sbc	r25, r25
 254:	91 95       	neg	r25
 256:	80 6a       	ori	r24, 0xA0	; 160
 258:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>

		 
    /* Send the required memory location address */
    I2C_Write((uint8_t)(u16addr));
 25c:	8c 2f       	mov	r24, r28
 25e:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>

		
    /* write byte to eeprom */
    I2C_Write(u8data);
 262:	81 2f       	mov	r24, r17
 264:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>
 

    /* Send the Stop Bit */
    I2C_Stop();
 268:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_Stop>
	
    return SUCCESS;
}
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <EEPROM_readByte>:

uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t *u8data)
{
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	8c 01       	movw	r16, r24
 284:	7b 01       	movw	r14, r22
	/* Send the Start Bit */
    I2C_Start();
 286:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>
  
    I2C_Write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
 28a:	e8 01       	movw	r28, r16
 28c:	cc 27       	eor	r28, r28
 28e:	d7 70       	andi	r29, 0x07	; 7
 290:	cc 0f       	add	r28, r28
 292:	cd 2f       	mov	r28, r29
 294:	cc 1f       	adc	r28, r28
 296:	dd 0b       	sbc	r29, r29
 298:	d1 95       	neg	r29
 29a:	8c 2f       	mov	r24, r28
 29c:	80 6a       	ori	r24, 0xA0	; 160
 29e:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>

    /* Send the required memory location address */
    I2C_Write((uint8_t)(u16addr));
 2a2:	80 2f       	mov	r24, r16
 2a4:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>

    /* Send the Repeated Start Bit */
    I2C_Start();
 2a8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_Start>

    I2C_Write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 2ac:	8c 2f       	mov	r24, r28
 2ae:	81 6a       	ori	r24, 0xA1	; 161
 2b0:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Write>


    /* Read Byte from Memory without send ACK */
    I2C_ReadNoAck(u8data);
 2b4:	c7 01       	movw	r24, r14
 2b6:	0e 94 83 01 	call	0x306	; 0x306 <I2C_ReadNoAck>

    /* Send the Stop Bit */
    I2C_Stop();
 2ba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_Stop>
    return SUCCESS;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	08 95       	ret

000002ce <I2C_Init>:
 *  Author: ayman
 */ 
#include "I2c.h"
uint8_t I2C_Init(uint8_t address)
{
	I2C_TWSR=I2C_PRESCALER_64;  //adjust Prescaler
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	91 b9       	out	0x01, r25	; 1
	
	I2C_TWAR=address;
 2d2:	82 b9       	out	0x02, r24	; 2
	I2C_TWCR =(1<<TWEN)|(1<<TWEA);
 2d4:	84 e4       	ldi	r24, 0x44	; 68
 2d6:	86 bf       	out	0x36, r24	; 54
	I2C_TWBR=20;
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	80 b9       	out	0x00, r24	; 0

   /* return success message */
   return I2C_SUCCESS;
}
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret

000002e0 <I2C_Start>:
uint8_t I2C_Start()
{
	I2C_TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 2e0:	84 ea       	ldi	r24, 0xA4	; 164
 2e2:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR & (1<<TWINT)));
 2e4:	06 b6       	in	r0, 0x36	; 54
 2e6:	07 fe       	sbrs	r0, 7
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <I2C_Start+0x4>
	
	return I2C_SUCCESS;
}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret

000002ee <I2C_Write>:
uint8_t I2C_Write(uint8_t Data)
{
	I2C_TWDR=Data;
 2ee:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR = (1<<TWINT)|(1<<TWEN);
 2f0:	84 e8       	ldi	r24, 0x84	; 132
 2f2:	86 bf       	out	0x36, r24	; 54
	
	while (!(I2C_TWCR & (1<<TWINT)));
 2f4:	06 b6       	in	r0, 0x36	; 54
 2f6:	07 fe       	sbrs	r0, 7
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <I2C_Write+0x6>
	return I2C_SUCCESS;
}
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret

000002fe <I2C_Stop>:
uint8_t I2C_Stop()
{
	I2C_TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 2fe:	84 e9       	ldi	r24, 0x94	; 148
 300:	86 bf       	out	0x36, r24	; 54
	//while (I2C_TWCR & TWSTO);
	return I2C_SUCCESS;
}
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret

00000306 <I2C_ReadNoAck>:
uint8_t I2C_ReadNoAck(uint8_t * Data)
{
	if(Data==NULL_PTR)
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	51 f0       	breq	.+20     	; 0x31e <I2C_ReadNoAck+0x18>
	{
		return I2C_FAILED;
	}
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);
 30a:	24 e8       	ldi	r18, 0x84	; 132
 30c:	26 bf       	out	0x36, r18	; 54
	while (!(I2C_TWCR & (1<<TWINT)));
 30e:	06 b6       	in	r0, 0x36	; 54
 310:	07 fe       	sbrs	r0, 7
 312:	fd cf       	rjmp	.-6      	; 0x30e <I2C_ReadNoAck+0x8>
	*Data=I2C_TWDR;
 314:	23 b1       	in	r18, 0x03	; 3
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	return I2C_SUCCESS;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
}
uint8_t I2C_ReadNoAck(uint8_t * Data)
{
	if(Data==NULL_PTR)
	{
		return I2C_FAILED;
 31e:	81 e0       	ldi	r24, 0x01	; 1
	}
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(I2C_TWCR & (1<<TWINT)));
	*Data=I2C_TWDR;
	return I2C_SUCCESS;
}
 320:	08 95       	ret

00000322 <UART_vdInit>:
#include "UART.h"

void UART_vdInit(void)
{
	// Set BaudRate  9600/8MhZ
	UBRRL_REGISTER=51;
 322:	83 e3       	ldi	r24, 0x33	; 51
 324:	89 b9       	out	0x09, r24	; 9
	UBRRH_REGISTER=0;
 326:	10 bc       	out	0x20, r1	; 32
	// Enable RX and TX
	UCSRB_REGISTER=0x18;
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	8a b9       	out	0x0a, r24	; 10
	// Set Frame Format -> 8 data, 1 stop, No Parity
	UCSRC_REGISTER=0x86;
 32c:	86 e8       	ldi	r24, 0x86	; 134
 32e:	80 bd       	out	0x20, r24	; 32
 330:	08 95       	ret

00000332 <UART_vdSendByte>:
}

void UART_vdSendByte(uint8_t data)
{
  // Wait until transmission Register Empty
  while(!(UCSRA_REGISTER&0x20));
 332:	5d 9b       	sbis	0x0b, 5	; 11
 334:	fe cf       	rjmp	.-4      	; 0x332 <UART_vdSendByte>
  UDR_REGISTER = data;
 336:	8c b9       	out	0x0c, r24	; 12
 338:	08 95       	ret

0000033a <UART_uint8_tGetByte>:

uint8_t UART_uint8_tGetByte(void)
{
  uint8_t Result;
  // Wait for data to be received 
  while(!(UCSRA_REGISTER&0x80));
 33a:	5f 9b       	sbis	0x0b, 7	; 11
 33c:	fe cf       	rjmp	.-4      	; 0x33a <UART_uint8_tGetByte>
  Result = UDR_REGISTER;
 33e:	8c b1       	in	r24, 0x0c	; 12
  
  // Clear Flag 
  SET_BIT(UCSRA_REGISTER,7);
 340:	9b b1       	in	r25, 0x0b	; 11
 342:	90 68       	ori	r25, 0x80	; 128
 344:	9b b9       	out	0x0b, r25	; 11
  return Result;
}
 346:	08 95       	ret

00000348 <UART_uint8_tSendString>:
uint8_t UART_uint8_tSendString(unsigned char*data)
{
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	8c 01       	movw	r16, r24
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <UART_uint8_tSendString+0x12>
	{
		UART_vdSendByte(data[i]);
 354:	0e 94 99 01 	call	0x332	; 0x332 <UART_vdSendByte>
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
uint8_t UART_uint8_tSendString(unsigned char*data)
{
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
 358:	cf 5f       	subi	r28, 0xFF	; 255
 35a:	f8 01       	movw	r30, r16
 35c:	ec 0f       	add	r30, r28
 35e:	f1 1d       	adc	r31, r1
 360:	80 81       	ld	r24, Z
 362:	8d 30       	cpi	r24, 0x0D	; 13
 364:	11 f0       	breq	.+4      	; 0x36a <UART_uint8_tSendString+0x22>
 366:	81 11       	cpse	r24, r1
 368:	f5 cf       	rjmp	.-22     	; 0x354 <UART_uint8_tSendString+0xc>
	{
		UART_vdSendByte(data[i]);
	}
	UART_vdSendByte('\r');
 36a:	8d e0       	ldi	r24, 0x0D	; 13
 36c:	0e 94 99 01 	call	0x332	; 0x332 <UART_vdSendByte>
	return 0;
}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <UART_uint8_tGetString>:
void UART_uint8_tGetString(uint8_t*data)
{
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	8c 01       	movw	r16, r24
	uint8_t i=0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		
	
		data[i]=UART_uint8_tGetByte();
 388:	78 01       	movw	r14, r16
 38a:	ec 0e       	add	r14, r28
 38c:	f1 1c       	adc	r15, r1
 38e:	0e 94 9d 01 	call	0x33a	; 0x33a <UART_uint8_tGetByte>
 392:	f7 01       	movw	r30, r14
 394:	80 83       	st	Z, r24
		i++;
 396:	cf 5f       	subi	r28, 0xFF	; 255
	
	}while(data[(i-1)]!=13);
 398:	f8 01       	movw	r30, r16
 39a:	ec 0f       	add	r30, r28
 39c:	f1 1d       	adc	r31, r1
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	80 81       	ld	r24, Z
 3a2:	8d 30       	cpi	r24, 0x0D	; 13
 3a4:	89 f7       	brne	.-30     	; 0x388 <UART_uint8_tGetString+0xe>

	
}
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
