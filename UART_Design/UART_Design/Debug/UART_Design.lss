
UART_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079e  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000183  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "../MCAL/UART.h"



int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	UART_vdInit();
  80:	0e 94 4b 00 	call	0x96	; 0x96 <UART_vdInit>
	uint8_t data[10];
    while (1) 
    {

		
		 UART_uint8_tGetString(data);
  84:	ce 01       	movw	r24, r28
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	0e 94 77 00 	call	0xee	; 0xee <UART_uint8_tGetString>
		 UART_uint8_tSendtring(data);
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_uint8_tSendtring>
  94:	f7 cf       	rjmp	.-18     	; 0x84 <main+0x18>

00000096 <UART_vdInit>:
#include "UART.h"
#include "UART_Registers.h"
void UART_vdInit(void)
{
	// Set BaudRate  9600/8MhZ
	UBRRL_REGISTER=51;
  96:	83 e3       	ldi	r24, 0x33	; 51
  98:	89 b9       	out	0x09, r24	; 9
	UBRRH_REGISTER=0;
  9a:	10 bc       	out	0x20, r1	; 32
	// Enable RX and TX
	UCSRB_REGISTER=0x18;
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10
	// Set Frame Format -> 8 data, 1 stop, No Parity
	UCSRC_REGISTER=0x86;
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <UART_vdSendByte>:
}

void UART_vdSendByte(uint8_t data)
{
  // Wait until transmission Register Empty
  while(!(UCSRA_REGISTER&0x20));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <UART_vdSendByte>
  UDR_REGISTER = data;
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <UART_uint8_tGetByte>:

uint8_t UART_uint8_tGetByte(void)
{
  uint8_t Result;
  // Wait for data to be received 
  while(!(UCSRA_REGISTER&0x80));
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <UART_uint8_tGetByte>
  Result = UDR_REGISTER;
  b2:	8c b1       	in	r24, 0x0c	; 12
  
  // Clear Flag 
  SET_BIT(UCSRA_REGISTER,7);
  b4:	9b b1       	in	r25, 0x0b	; 11
  b6:	90 68       	ori	r25, 0x80	; 128
  b8:	9b b9       	out	0x0b, r25	; 11
  return Result;
}
  ba:	08 95       	ret

000000bc <UART_uint8_tSendtring>:
uint8_t UART_uint8_tSendtring(uint8_t*data)
{
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	8c 01       	movw	r16, r24
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	03 c0       	rjmp	.+6      	; 0xce <UART_uint8_tSendtring+0x12>
	{
		UART_vdSendByte(data[i]);
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_vdSendByte>
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
uint8_t UART_uint8_tSendtring(uint8_t*data)
{
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
  cc:	cf 5f       	subi	r28, 0xFF	; 255
  ce:	f8 01       	movw	r30, r16
  d0:	ec 0f       	add	r30, r28
  d2:	f1 1d       	adc	r31, r1
  d4:	80 81       	ld	r24, Z
  d6:	8d 30       	cpi	r24, 0x0D	; 13
  d8:	11 f0       	breq	.+4      	; 0xde <UART_uint8_tSendtring+0x22>
  da:	81 11       	cpse	r24, r1
  dc:	f5 cf       	rjmp	.-22     	; 0xc8 <UART_uint8_tSendtring+0xc>
	{
		UART_vdSendByte(data[i]);
	}
	UART_vdSendByte('\r');
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_vdSendByte>
	return 0;
}
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <UART_uint8_tGetString>:
void UART_uint8_tGetString(uint8_t*data)
{
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	8c 01       	movw	r16, r24
	uint8_t i=0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		
		
		data[i]=UART_uint8_tGetByte();
  fc:	78 01       	movw	r14, r16
  fe:	ec 0e       	add	r14, r28
 100:	f1 1c       	adc	r15, r1
 102:	0e 94 57 00 	call	0xae	; 0xae <UART_uint8_tGetByte>
 106:	f7 01       	movw	r30, r14
 108:	80 83       	st	Z, r24
		i++;
 10a:	cf 5f       	subi	r28, 0xFF	; 255
		
	}while(data[(i-1)]!=13);
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	f1 1d       	adc	r31, r1
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	80 81       	ld	r24, Z
 116:	8d 30       	cpi	r24, 0x0D	; 13
 118:	89 f7       	brne	.-30     	; 0xfc <UART_uint8_tGetString+0xe>

	
}
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
