
I2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae8  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ba  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a0  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ab  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

	int x;
int main(void)
{

	DIO_setPortDirection(PortA,OUTPUT);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_setPortDirection>
	I2C_Init(0b00001110);
  84:	8e e0       	ldi	r24, 0x0E	; 14
  86:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_Init>
    while (1) 
    {
		I2C_ReadAck(&x);
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_ReadAck>
		DIO_writePort(PortA,x);
  92:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 81 00 	call	0x102	; 0x102 <DIO_writePort>
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <main+0xe>

0000009e <DIO_setPortDirection>:
		}
		break;
		}
	}
	return u8_State;
}
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	60 f5       	brcc	.+88     	; 0xfa <DIO_setPortDirection+0x5c>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	79 f0       	breq	.+30     	; 0xc4 <DIO_setPortDirection+0x26>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_setPortDirection+0x14>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	a9 f0       	breq	.+42     	; 0xd6 <DIO_setPortDirection+0x38>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	e1 f0       	breq	.+56     	; 0xe8 <DIO_setPortDirection+0x4a>
  b0:	26 c0       	rjmp	.+76     	; 0xfe <DIO_setPortDirection+0x60>
  b2:	61 30       	cpi	r22, 0x01	; 1
  b4:	21 f4       	brne	.+8      	; 0xbe <DIO_setPortDirection+0x20>
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	08 95       	ret
  be:	1a ba       	out	0x1a, r1	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	08 95       	ret
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	21 f4       	brne	.+8      	; 0xd0 <DIO_setPortDirection+0x32>
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	17 ba       	out	0x17, r1	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret
  d6:	61 30       	cpi	r22, 0x01	; 1
  d8:	21 f4       	brne	.+8      	; 0xe2 <DIO_setPortDirection+0x44>
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
  e2:	14 ba       	out	0x14, r1	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	21 f4       	brne	.+8      	; 0xf4 <DIO_setPortDirection+0x56>
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	81 bb       	out	0x11, r24	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	11 ba       	out	0x11, r1	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	08 95       	ret
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret

00000102 <DIO_writePort>:


E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	a0 f4       	brcc	.+40     	; 0x12e <DIO_writePort+0x2c>
		u8_State=Success;
		switch(port)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	49 f0       	breq	.+18     	; 0x11c <DIO_writePort+0x1a>
 10a:	28 f0       	brcs	.+10     	; 0x116 <DIO_writePort+0x14>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	49 f0       	breq	.+18     	; 0x122 <DIO_writePort+0x20>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	51 f0       	breq	.+20     	; 0x128 <DIO_writePort+0x26>
 114:	0e c0       	rjmp	.+28     	; 0x132 <DIO_writePort+0x30>
		{
		case PortA:
			PORTA=data;
 116:	6b bb       	out	0x1b, r22	; 27

E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 118:	81 e0       	ldi	r24, 0x01	; 1
		switch(port)
		{
		case PortA:
			PORTA=data;
			break;
 11a:	08 95       	ret
		case PortB:
			PORTB=data;
 11c:	68 bb       	out	0x18, r22	; 24

E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 11e:	81 e0       	ldi	r24, 0x01	; 1
		case PortA:
			PORTA=data;
			break;
		case PortB:
			PORTB=data;
			break;
 120:	08 95       	ret
		case PortC:
			PORTC=data;
 122:	65 bb       	out	0x15, r22	; 21

E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 124:	81 e0       	ldi	r24, 0x01	; 1
		case PortB:
			PORTB=data;
			break;
		case PortC:
			PORTC=data;
			break;
 126:	08 95       	ret
		case PortD:
			PORTD=data;
 128:	62 bb       	out	0x12, r22	; 18

E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 12a:	81 e0       	ldi	r24, 0x01	; 1
		case PortC:
			PORTC=data;
			break;
		case PortD:
			PORTD=data;
			break;
 12c:	08 95       	ret
}


E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
	E_STATUS u8_State=ERROR;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	08 95       	ret
	if((port>=PortA)&&(port<=PortD)){
		u8_State=Success;
 132:	81 e0       	ldi	r24, 0x01	; 1
			PORTD=data;
			break;
		}
	}
	return u8_State;
}
 134:	08 95       	ret

00000136 <I2C_Init>:
	}
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(I2C_TWCR & (1<<TWINT)));
	*Data=I2C_TWDR;
	return I2C_SUCCESS;
}
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	91 b9       	out	0x01, r25	; 1
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	84 e4       	ldi	r24, 0x44	; 68
 13e:	86 bf       	out	0x36, r24	; 54
 140:	84 e1       	ldi	r24, 0x14	; 20
 142:	80 b9       	out	0x00, r24	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret

00000148 <I2C_ReadAck>:
uint8_t I2C_ReadAck(uint8_t * Data)
{
	if(Data==NULL_PTR)
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	51 f0       	breq	.+20     	; 0x160 <I2C_ReadAck+0x18>
	{
		return I2C_FAILED;
	}
	I2C_TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 14c:	24 ec       	ldi	r18, 0xC4	; 196
 14e:	26 bf       	out	0x36, r18	; 54
	while (!(I2C_TWCR & (1<<TWINT)));
 150:	06 b6       	in	r0, 0x36	; 54
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <I2C_ReadAck+0x8>
	*Data=I2C_TWDR;
 156:	23 b1       	in	r18, 0x03	; 3
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	return I2C_SUCCESS;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
}
uint8_t I2C_ReadAck(uint8_t * Data)
{
	if(Data==NULL_PTR)
	{
		return I2C_FAILED;
 160:	81 e0       	ldi	r24, 0x01	; 1
	}
	I2C_TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while (!(I2C_TWCR & (1<<TWINT)));
	*Data=I2C_TWDR;
	return I2C_SUCCESS;
 162:	08 95       	ret

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
