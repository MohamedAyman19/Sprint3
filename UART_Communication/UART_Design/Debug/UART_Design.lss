
UART_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800080  00800080  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dcc  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000810  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000845  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e8  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  8a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <System_Init>:
uint8_t recieved;
uint8_t data[6];
uint8_t *check[12];
void System_Init()
{
	UART_vdInit();
  92:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <UART_vdInit>
	Led_vdInit();
  96:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Led_vdInit>
  9a:	08 95       	ret

0000009c <System_Update>:

}
void System_Update()
{
	
	UART_uint8_tGetString(data);
  9c:	89 e9       	ldi	r24, 0x99	; 153
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 21 02 	call	0x442	; 0x442 <UART_uint8_tGetString>
	/*for(uint8_t i=0;i<5;i++)
	{
		check[i]=data[i];
	}*/
	if ((data[0]=='s')&&(data[1]=='t')&&(data[2]=='a')&&(data[3]=='r')&&(data[4]=='t'))
  a4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <data>
  a8:	83 37       	cpi	r24, 0x73	; 115
  aa:	51 f5       	brne	.+84     	; 0x100 <System_Update+0x64>
  ac:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <data+0x1>
  b0:	94 37       	cpi	r25, 0x74	; 116
  b2:	31 f5       	brne	.+76     	; 0x100 <System_Update+0x64>
  b4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <data+0x2>
  b8:	91 36       	cpi	r25, 0x61	; 97
  ba:	11 f5       	brne	.+68     	; 0x100 <System_Update+0x64>
  bc:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <data+0x3>
  c0:	92 37       	cpi	r25, 0x72	; 114
  c2:	f1 f4       	brne	.+60     	; 0x100 <System_Update+0x64>
  c4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <data+0x4>
  c8:	94 37       	cpi	r25, 0x74	; 116
  ca:	d1 f4       	brne	.+52     	; 0x100 <System_Update+0x64>
	{
		Led_vdOutput(LED_GREEN,1);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_RED,0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_YELLOW,0);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		strcpy(check,"GreenIsOk\r");
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	a1 e8       	ldi	r26, 0x81	; 129
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <System_Update+0x52>
		UART_uint8_tSendtring(check);
  f6:	81 e8       	ldi	r24, 0x81	; 129
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_uint8_tSendtring>
  fe:	08 95       	ret
	}
	else if ((data[0]=='s')&&(data[1]=='t')&&(data[2]=='o')&&(data[3]=='p'))
 100:	83 37       	cpi	r24, 0x73	; 115
 102:	31 f5       	brne	.+76     	; 0x150 <System_Update+0xb4>
 104:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <data+0x1>
 108:	94 37       	cpi	r25, 0x74	; 116
 10a:	11 f5       	brne	.+68     	; 0x150 <System_Update+0xb4>
 10c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <data+0x2>
 110:	9f 36       	cpi	r25, 0x6F	; 111
 112:	f1 f4       	brne	.+60     	; 0x150 <System_Update+0xb4>
 114:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <data+0x3>
 118:	90 37       	cpi	r25, 0x70	; 112
 11a:	d1 f4       	brne	.+52     	; 0x150 <System_Update+0xb4>
	{
		Led_vdOutput(LED_GREEN,0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_RED,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_YELLOW,0);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		strcpy(check,"RedIsOk\r");
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	eb e6       	ldi	r30, 0x6B	; 107
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	a1 e8       	ldi	r26, 0x81	; 129
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	8a 95       	dec	r24
 144:	e1 f7       	brne	.-8      	; 0x13e <System_Update+0xa2>
		UART_uint8_tSendtring(check);
 146:	81 e8       	ldi	r24, 0x81	; 129
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_uint8_tSendtring>
 14e:	08 95       	ret
	}
	else if ((data[0]=='w')&&(data[1]=='a')&&(data[2]=='i')&&(data[3]=='t'))
 150:	87 37       	cpi	r24, 0x77	; 119
 152:	31 f5       	brne	.+76     	; 0x1a0 <System_Update+0x104>
 154:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <data+0x1>
 158:	91 36       	cpi	r25, 0x61	; 97
 15a:	11 f5       	brne	.+68     	; 0x1a0 <System_Update+0x104>
 15c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <data+0x2>
 160:	99 36       	cpi	r25, 0x69	; 105
 162:	f1 f4       	brne	.+60     	; 0x1a0 <System_Update+0x104>
 164:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <data+0x3>
 168:	94 37       	cpi	r25, 0x74	; 116
 16a:	d1 f4       	brne	.+52     	; 0x1a0 <System_Update+0x104>
	{
		Led_vdOutput(LED_GREEN,0);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_RED,0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		Led_vdOutput(LED_YELLOW,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_vdOutput>
		strcpy(check,"YellowIsOk\r");
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	e4 e7       	ldi	r30, 0x74	; 116
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	a1 e8       	ldi	r26, 0x81	; 129
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	01 90       	ld	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	8a 95       	dec	r24
 194:	e1 f7       	brne	.-8      	; 0x18e <System_Update+0xf2>
		UART_uint8_tSendtring(check);
 196:	81 e8       	ldi	r24, 0x81	; 129
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_uint8_tSendtring>
 19e:	08 95       	ret
		
	}
	else if ((data[0]=='a')&&(data[1]=='t'))
 1a0:	81 36       	cpi	r24, 0x61	; 97
 1a2:	89 f4       	brne	.+34     	; 0x1c6 <System_Update+0x12a>
 1a4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <data+0x1>
 1a8:	84 37       	cpi	r24, 0x74	; 116
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <System_Update+0x12a>
	{
		strcpy(check,"Ok\r");
 1ac:	e1 e8       	ldi	r30, 0x81	; 129
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	8f e4       	ldi	r24, 0x4F	; 79
 1b2:	9b e6       	ldi	r25, 0x6B	; 107
 1b4:	91 83       	std	Z+1, r25	; 0x01
 1b6:	80 83       	st	Z, r24
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	93 83       	std	Z+3, r25	; 0x03
 1be:	82 83       	std	Z+2, r24	; 0x02
		UART_uint8_tSendtring(check);
 1c0:	cf 01       	movw	r24, r30
 1c2:	0e 94 0e 02 	call	0x41c	; 0x41c <UART_uint8_tSendtring>
 1c6:	08 95       	ret

000001c8 <main>:



int main(void)
{
	System_Init();
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <System_Init>
	
    while (1) 
    {
		 System_Update();
 1cc:	0e 94 4e 00 	call	0x9c	; 0x9c <System_Update>
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <main+0x4>

000001d2 <Led_vdInit>:
#include "../../Macros.h"
#include "../../MCAL/DIO/DIO_Int.h"
#include "Led.h"
void Led_vdInit()
{
	DIO_sint8_tSetPinDirection(PortA,PIN0,PIN_OUTPUT);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_sint8_tSetPinDirection>
	DIO_sint8_tSetPinDirection(PortA,PIN1,PIN_OUTPUT);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_sint8_tSetPinDirection>
	DIO_sint8_tSetPinDirection(PortA,PIN2,PIN_OUTPUT);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_sint8_tSetPinDirection>
 1f0:	08 95       	ret

000001f2 <Led_vdOutput>:
}

void Led_vdOutput(uint8_t number,uint8_t state)
{
 1f2:	46 2f       	mov	r20, r22
	DIO_sint8_tWritePinValue(PortA,number,state);
 1f4:	68 2f       	mov	r22, r24
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_sint8_tWritePinValue>
 1fc:	08 95       	ret

000001fe <DIO_sint8_tSetPinDirection>:
			break;
		}
	}
	
	return PARAMETER_ERROR;
}
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	c1 f5       	brne	.+112    	; 0x272 <DIO_sint8_tSetPinDirection+0x74>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	91 f0       	breq	.+36     	; 0x22a <DIO_sint8_tSetPinDirection+0x2c>
 206:	28 f0       	brcs	.+10     	; 0x212 <DIO_sint8_tSetPinDirection+0x14>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	d9 f0       	breq	.+54     	; 0x242 <DIO_sint8_tSetPinDirection+0x44>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	29 f1       	breq	.+74     	; 0x25a <DIO_sint8_tSetPinDirection+0x5c>
 210:	6e c0       	rjmp	.+220    	; 0x2ee <DIO_sint8_tSetPinDirection+0xf0>
 212:	2a b3       	in	r18, 0x1a	; 26
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_sint8_tSetPinDirection+0x20>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_sint8_tSetPinDirection+0x1c>
 222:	82 2b       	or	r24, r18
 224:	8a bb       	out	0x1a, r24	; 26
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
 22a:	27 b3       	in	r18, 0x17	; 23
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_sint8_tSetPinDirection+0x38>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_sint8_tSetPinDirection+0x34>
 23a:	82 2b       	or	r24, r18
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	08 95       	ret
 242:	24 b3       	in	r18, 0x14	; 20
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_sint8_tSetPinDirection+0x50>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_sint8_tSetPinDirection+0x4c>
 252:	82 2b       	or	r24, r18
 254:	84 bb       	out	0x14, r24	; 20
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	21 b3       	in	r18, 0x11	; 17
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_sint8_tSetPinDirection+0x68>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_sint8_tSetPinDirection+0x64>
 26a:	82 2b       	or	r24, r18
 26c:	81 bb       	out	0x11, r24	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	08 95       	ret
 272:	41 11       	cpse	r20, r1
 274:	3e c0       	rjmp	.+124    	; 0x2f2 <DIO_sint8_tSetPinDirection+0xf4>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	99 f0       	breq	.+38     	; 0x2a0 <DIO_sint8_tSetPinDirection+0xa2>
 27a:	28 f0       	brcs	.+10     	; 0x286 <DIO_sint8_tSetPinDirection+0x88>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	e9 f0       	breq	.+58     	; 0x2ba <DIO_sint8_tSetPinDirection+0xbc>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	41 f1       	breq	.+80     	; 0x2d4 <DIO_sint8_tSetPinDirection+0xd6>
 284:	38 c0       	rjmp	.+112    	; 0x2f6 <DIO_sint8_tSetPinDirection+0xf8>
 286:	2a b3       	in	r18, 0x1a	; 26
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_sint8_tSetPinDirection+0x94>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_sint8_tSetPinDirection+0x90>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	8a bb       	out	0x1a, r24	; 26
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	08 95       	ret
 2a0:	27 b3       	in	r18, 0x17	; 23
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_sint8_tSetPinDirection+0xae>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_sint8_tSetPinDirection+0xaa>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	87 bb       	out	0x17, r24	; 23
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	24 b3       	in	r18, 0x14	; 20
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_sint8_tSetPinDirection+0xc8>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_sint8_tSetPinDirection+0xc4>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	84 bb       	out	0x14, r24	; 20
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	21 b3       	in	r18, 0x11	; 17
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_sint8_tSetPinDirection+0xe2>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_sint8_tSetPinDirection+0xde>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	08 95       	ret
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	08 95       	ret
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <DIO_sint8_tWritePinValue>:

sint8_t DIO_sint8_tWritePinValue(uint8_t PortID,uint8_t PinNumber, uint8_t PinValue)
{
	if ((PortID >= 0 || PortID <= 3) && (PinNumber >= 0 || PinNumber <= 7))
	{
		if(PinValue==PIN_HIGH)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	c1 f5       	brne	.+112    	; 0x36e <DIO_sint8_tWritePinValue+0x74>
		{
			switch (PortID)
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	91 f0       	breq	.+36     	; 0x326 <DIO_sint8_tWritePinValue+0x2c>
 302:	28 f0       	brcs	.+10     	; 0x30e <DIO_sint8_tWritePinValue+0x14>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	d9 f0       	breq	.+54     	; 0x33e <DIO_sint8_tWritePinValue+0x44>
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	29 f1       	breq	.+74     	; 0x356 <DIO_sint8_tWritePinValue+0x5c>
 30c:	6e c0       	rjmp	.+220    	; 0x3ea <DIO_sint8_tWritePinValue+0xf0>
			{
				case PortA:
				SET_BIT(PORTA_REGISTER,PinNumber);
 30e:	2b b3       	in	r18, 0x1b	; 27
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_sint8_tWritePinValue+0x20>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_sint8_tWritePinValue+0x1c>
 31e:	82 2b       	or	r24, r18
 320:	8b bb       	out	0x1b, r24	; 27
				return 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret
				break;
				case PortB:
				SET_BIT(PORTB_REGISTER,PinNumber);
 326:	28 b3       	in	r18, 0x18	; 24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_sint8_tWritePinValue+0x38>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_sint8_tWritePinValue+0x34>
 336:	82 2b       	or	r24, r18
 338:	88 bb       	out	0x18, r24	; 24
				return 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	08 95       	ret
				break;
				case PortC:
				SET_BIT(PORTC_REGISTER,PinNumber);
 33e:	25 b3       	in	r18, 0x15	; 21
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_sint8_tWritePinValue+0x50>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_sint8_tWritePinValue+0x4c>
 34e:	82 2b       	or	r24, r18
 350:	85 bb       	out	0x15, r24	; 21
				return 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	08 95       	ret
				break;
				case PortD:
				SET_BIT(PORTD_REGISTER,PinNumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_sint8_tWritePinValue+0x68>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_sint8_tWritePinValue+0x64>
 366:	82 2b       	or	r24, r18
 368:	82 bb       	out	0x12, r24	; 18
				return 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret
				default:
				return PARAMETER_ERROR;
				break;
			}
		}
		else if(PinValue==PIN_LOW)
 36e:	41 11       	cpse	r20, r1
 370:	3e c0       	rjmp	.+124    	; 0x3ee <DIO_sint8_tWritePinValue+0xf4>
		{
			switch (PortID)
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	99 f0       	breq	.+38     	; 0x39c <DIO_sint8_tWritePinValue+0xa2>
 376:	28 f0       	brcs	.+10     	; 0x382 <DIO_sint8_tWritePinValue+0x88>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	e9 f0       	breq	.+58     	; 0x3b6 <DIO_sint8_tWritePinValue+0xbc>
 37c:	83 30       	cpi	r24, 0x03	; 3
 37e:	41 f1       	breq	.+80     	; 0x3d0 <DIO_sint8_tWritePinValue+0xd6>
 380:	38 c0       	rjmp	.+112    	; 0x3f2 <DIO_sint8_tWritePinValue+0xf8>
			{
				case PortA:
				CLR_BIT(PORTA_REGISTER,PinNumber);
 382:	2b b3       	in	r18, 0x1b	; 27
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_sint8_tWritePinValue+0x94>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_sint8_tWritePinValue+0x90>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	8b bb       	out	0x1b, r24	; 27
				return 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
				break;
				case PortB:
				CLR_BIT(PORTB_REGISTER,PinNumber);
 39c:	28 b3       	in	r18, 0x18	; 24
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_sint8_tWritePinValue+0xae>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_sint8_tWritePinValue+0xaa>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	88 bb       	out	0x18, r24	; 24
				return 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
				break;
				case PortC:
				CLR_BIT(PORTC_REGISTER,PinNumber);
 3b6:	25 b3       	in	r18, 0x15	; 21
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_sint8_tWritePinValue+0xc8>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_sint8_tWritePinValue+0xc4>
 3c6:	80 95       	com	r24
 3c8:	82 23       	and	r24, r18
 3ca:	85 bb       	out	0x15, r24	; 21
				return 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	08 95       	ret
				break;
				case PortD:
				CLR_BIT(PORTD_REGISTER,PinNumber);
 3d0:	22 b3       	in	r18, 0x12	; 18
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_sint8_tWritePinValue+0xe2>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_sint8_tWritePinValue+0xde>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	82 bb       	out	0x12, r24	; 18
				return 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	08 95       	ret
				case PortD:
				SET_BIT(PORTD_REGISTER,PinNumber);
				return 1;
				break;
				default:
				return PARAMETER_ERROR;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	08 95       	ret
			}
		}

	}	
	
	return PARAMETER_ERROR;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	08 95       	ret
				case PortD:
				CLR_BIT(PORTD_REGISTER,PinNumber);
				return 1;
				break;
				default:
				return PARAMETER_ERROR;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
		}

	}	
	
	return PARAMETER_ERROR;
}
 3f4:	08 95       	ret

000003f6 <UART_vdInit>:
#include "UART.h"
#include "UART_Registers.h"
void UART_vdInit(void)
{
	// Set BaudRate  9600/8MhZ
	UBRRL_REGISTER=51;
 3f6:	83 e3       	ldi	r24, 0x33	; 51
 3f8:	89 b9       	out	0x09, r24	; 9
	UBRRH_REGISTER=0;
 3fa:	10 bc       	out	0x20, r1	; 32
	// Enable RX and TX
	UCSRB_REGISTER=0x18;
 3fc:	88 e1       	ldi	r24, 0x18	; 24
 3fe:	8a b9       	out	0x0a, r24	; 10
	// Set Frame Format -> 8 data, 1 stop, No Parity
	UCSRC_REGISTER=0x86;
 400:	86 e8       	ldi	r24, 0x86	; 134
 402:	80 bd       	out	0x20, r24	; 32
 404:	08 95       	ret

00000406 <UART_vdSendByte>:
}

void UART_vdSendByte(uint8_t data)
{
  // Wait until transmission Register Empty
  while(!(UCSRA_REGISTER&0x20));
 406:	5d 9b       	sbis	0x0b, 5	; 11
 408:	fe cf       	rjmp	.-4      	; 0x406 <UART_vdSendByte>
  UDR_REGISTER = data;
 40a:	8c b9       	out	0x0c, r24	; 12
 40c:	08 95       	ret

0000040e <UART_uint8_tGetByte>:

uint8_t UART_uint8_tGetByte(void)
{
  uint8_t Result;
  // Wait for data to be received 
  while(!(UCSRA_REGISTER&0x80));
 40e:	5f 9b       	sbis	0x0b, 7	; 11
 410:	fe cf       	rjmp	.-4      	; 0x40e <UART_uint8_tGetByte>
  Result = UDR_REGISTER;
 412:	8c b1       	in	r24, 0x0c	; 12
  
  // Clear Flag 
  SET_BIT(UCSRA_REGISTER,7);
 414:	9b b1       	in	r25, 0x0b	; 11
 416:	90 68       	ori	r25, 0x80	; 128
 418:	9b b9       	out	0x0b, r25	; 11
  return Result;
}
 41a:	08 95       	ret

0000041c <UART_uint8_tSendtring>:
uint8_t UART_uint8_tSendtring(unsigned char*data)
{
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	8c 01       	movw	r16, r24
	for(uint8_t i=0;data[i]!='\0';i++)
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	03 c0       	rjmp	.+6      	; 0x42e <UART_uint8_tSendtring+0x12>
	{
		UART_vdSendByte(data[i]);
 428:	0e 94 03 02 	call	0x406	; 0x406 <UART_vdSendByte>
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
uint8_t UART_uint8_tSendtring(unsigned char*data)
{
	for(uint8_t i=0;data[i]!='\0';i++)
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	f8 01       	movw	r30, r16
 430:	ec 0f       	add	r30, r28
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
 436:	81 11       	cpse	r24, r1
 438:	f7 cf       	rjmp	.-18     	; 0x428 <UART_uint8_tSendtring+0xc>
	{
		UART_vdSendByte(data[i]);
	}
	return 0;
}
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <UART_uint8_tGetString>:
void UART_uint8_tGetString(uint8_t*data)
{
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	8c 01       	movw	r16, r24
	uint8_t i=0;
 44e:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		
	
		data[i]=UART_uint8_tGetByte();
 450:	78 01       	movw	r14, r16
 452:	ec 0e       	add	r14, r28
 454:	f1 1c       	adc	r15, r1
 456:	0e 94 07 02 	call	0x40e	; 0x40e <UART_uint8_tGetByte>
 45a:	f7 01       	movw	r30, r14
 45c:	80 83       	st	Z, r24
		i++;
 45e:	cf 5f       	subi	r28, 0xFF	; 255
	
	}while(data[(i-1)]!=13);
 460:	f8 01       	movw	r30, r16
 462:	ec 0f       	add	r30, r28
 464:	f1 1d       	adc	r31, r1
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	80 81       	ld	r24, Z
 46a:	8d 30       	cpi	r24, 0x0D	; 13
 46c:	89 f7       	brne	.-30     	; 0x450 <UART_uint8_tGetString+0xe>

	
}
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
